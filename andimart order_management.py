# -*- coding: utf-8 -*-
"""v.0.5 Self-Service Cashier Andimart (final version)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ny23TRQ3n8GCPbh50hi927bSnA9z6hp7
"""

import time
import random
import datetime
import sqlite3
from prettytable import PrettyTable
import re

# Function to validate the phone number input
def validate_phone_number(phone_number):
    pattern = re.compile(r'^\d{10,15}$')
    return bool(pattern.match(phone_number))

# Create transaction ID
def transaction():
    return f'trnsct_{random.randint(100, 999)}'

# Define variables to store customer information
customer_name = ''
customer_id = ''
order_type = ''
order_date = ''
phone_number = ''
payment_method = ''
preferred_date = None

# Initialize order list
order = []

# Create DB connection
conn = sqlite3.connect('transactions.db')
c = conn.cursor()

# Create a function to print the customer details and current order status
def print_order():
    global order, customer_name, customer_id, order_type, order_date, phone_number
    # Print customer details
    print("Receipt")
    print("======================================")
    print(f"Customer Name: {customer_name}")
    print(f"Customer ID: {customer_id}")
    print(f"Order Date: {order_date}")
    print(f"Order Type: {order_type}")
    print(f"Phone Number: {phone_number}")
    print("======================================")

    # Print current order items
    if len(order) > 0:
        table = PrettyTable(['Item Name', 'Quantity', 'Price per Item', 'Total Price'])
        for item in order:
            table.add_row([item['item_name'], item['item_qty'], item['item_price'], item['total_price']])
        print(table)
        print("======================================")

        # Print grand total, discount and total after discount
        grand_total = sum([item['total_price'] for item in order])
        discount, total_after_discount = calculate_discount(grand_total)
        print(f"Grand Total: {grand_total}")
        print(f"Discount: {discount}")
        print(f"Total after Discount: {total_after_discount}")


# Update Customer details
def update_customer_details():
    global customer_name, customer_id, order_type, order_date, phone_number, preferred_date

    # Collect customer details
    print("Update Customer Details")
    customer_name = input("Enter your name: ")
    order_type = input("Enter order type (pickup/delivery): ").lower()
    phone_number = input("Enter your phone number: ")
    order_date = input("Enter the date you want your order (dd/mm/yyyy): ")

    # Validate the phone number
    while not validate_phone_number(phone_number):
        print("Invalid phone number. Please try again.")
        phone_number = input("Enter your phone number: ")

    # Generate a customer_id
    customer_id = f"{customer_name}_{datetime.datetime.strptime(order_date, '%d/%m/%Y').strftime('%Y%m%d')}_{order_type[0]}_{transaction()}"

    print(f"Customer details updated successfully! Your customer ID is {customer_id}")

# Update item name
def update_item_name():
    global order

    item_index = input("Enter the index of the item you want to update: ")
    if not item_index.isdigit():
        print("Invalid item index. Please enter a valid integer.")
        return

    item_index = int(item_index) - 1
    if item_index < 0 or item_index >= len(order):
        print("Invalid item index.")
        return

    new_item_name = input("Enter the new item name: ")
    order[item_index]['item_name'] = new_item_name

    print("Item name updated successfully!")

#Update item price
def update_item_price():
    global order

    item_index = input("Enter the index of the item you want to update: ")
    if not item_index.isdigit():
        print("Invalid item index. Please enter a valid integer.")
        return

    item_index = int(item_index) - 1
    if item_index < 0 or item_index >= len(order):
        print("Invalid item index.")
        return

    new_item_price = input("Enter the new item price: ")
    if not new_item_price.isdigit() or int(new_item_price) <= 0:
        print("Invalid item price. Please enter a positive integer.")
        return

    order[item_index]['item_price'] = int(new_item_price)

    print("Item price updated successfully!")

# Update item quantity
def update_item_qty():
    global order

    item_index = input("Enter the index of the item you want to update: ")
    if not item_index.isdigit():
        print("Invalid item index. Please enter a valid integer.")
        return

    item_index = int(item_index) - 1
    if item_index < 0 or item_index >= len(order):
        print("Invalid item index.")
        return

    new_item_qty = input("Enter the new item quantity: ")
    if not new_item_qty.isdigit() or int(new_item_qty) <= 0:
        print("Invalid item quantity. Please enter a positive integer.")
        return

    order[item_index]['item_qty'] = int(new_item_qty)
    order[item_index]['total_price'] = order[item_index]['item_price'] * int(new_item_qty)

    print("Item quantity updated successfully!")

# Delete item from order
def delete_item():
    global order

    item_index = input("Enter the index of the item you want to delete: ")
    if not item_index.isdigit():
        print("Invalid item index. Please enter a valid integer.")
        return

    item_index = int(item_index) - 1
    if item_index < 0 or item_index >= len(order):
        print("Invalid item index.")
        return

    order.pop(item_index)
    print("Item deleted successfully!")

# Reset the order
def reset_transaction():
    global order
    order = []
    print("Order has been reset!")

# Add item to order
def add_item():
    item_name = input('Enter item name: ')
    while True:
        try:
            item_qty = int(input('Enter item quantity: '))
            item_price = int(input('Enter item price: '))
            if item_qty <= 0 or item_price <= 0:
                raise ValueError
            break
        except ValueError:
            print("Invalid input. Please enter a positive integer.")

    total_price = item_qty * item_price

    order.append({
        'item_name': item_name,
        'item_qty': item_qty,
        'item_price': item_price,
        'total_price': total_price
    })
    print(f"{item_name} ({item_qty} pcs) added to order!")

# Function to check order details
def check_order_details():
    global order
    # If there are no items in the order, print a message and return
    if len(order) == 0:
        print("Your cart is empty.")
        return

    # Print the order details
    print_order()

# Calculate the discount
def calculate_discount(grand_total):
    if grand_total > 500000:
        discount = round(grand_total * 0.07)  # 7% discount
    elif grand_total > 300000:
        discount = round(grand_total * 0.06)  # 6% discount
    elif grand_total > 200000:
        discount = round(grand_total * 0.05)  # 5% discount
    else:
        discount = 0

    # Calculate total after discount
    total_after_discount = round(grand_total - discount)

    return discount, total_after_discount

# Get payment method
def get_payment_method():
    payment_methods = ["Cash", "Debit Card", "Credit Card", "OVO", "GoPay", "Dana", "LinkAja"]
    print("\nSelect a payment method: ")
    for i, method in enumerate(payment_methods, 1):
        print(f"{i}. {method}")

    while True:
        selected = input("\nEnter your selection (1-7): ")
        if selected.isdigit() and 1 <= int(selected) <= 7:
            return payment_methods[int(selected) - 1]
        else:
            print("Invalid selection. Please enter a number between 1 and 7.")

# Global variable to hold payment method
payment_method = ""

# Function to select a payment method
def select_payment_method():
    global payment_method

    print("\nSelect a payment method:")
    print("1. Cash")
    print("2. Debit Card")
    print("3. Credit Card")
    print("4. OVO")
    print("5. GoPay")
    print("6. Dana")
    print("7. LinkAja")

    while True:
        option = input("Enter your selection (1-7): ")

        if option == "1":
            payment_method = "Cash"
            break
        elif option == "2":
            payment_method = "Debit Card"
            break
        elif option == "3":
            payment_method = "Credit Card"
            break
        elif option == "4":
            payment_method = "OVO"
            break
        elif option == "5":
            payment_method = "GoPay"
            break
        elif option == "6":
            payment_method = "Dana"
            break
        elif option == "7":
            payment_method = "LinkAja"
            break
        else:
            print("Invalid selection. Please choose between 1 and 7.")

    print(f"You have selected {payment_method} as your payment method.")


# Print receipt
def print_receipt():
    global order, customer_name, customer_id, order_type, order_date, phone_number

    # Create pretty table
    table = PrettyTable()
    table.field_names = ["Item Name", "Quantity", "Price per Item", "Total Price"]
    grand_total = 0
    for item in order:
        table.add_row([item['item_name'], item['item_qty'], item['item_price'], item['total_price']])
        grand_total += item['total_price']

    print("\nReceipt")
    print("======================================")
    print(f"Customer Name: {customer_name}")
    print(f"Customer ID: {customer_id}")
    print(f"Order Date: {order_date.strftime('%d/%m/%Y')}")
    print(f"Order Type: {order_type}")
    print(f"Phone Number: {phone_number}")
    print("======================================")
    print(table)
    print("======================================")
    print(f"Grand Total: {grand_total}")

    discount, total_after_discount = calculate_discount(grand_total)
    print(f"Discount: {discount}")
    print(f"Total after Discount: {total_after_discount}")

    payment_method = get_payment_method()
    print(f"Payment Method: {payment_method}")

    checkout()

# Function to checkout
def checkout():
    global order, customer_id, customer_name, order_date, order_type, phone_number, payment_method
    # Select a payment method
    select_payment_method()
    # If there are no items in the order, print a message and return
    if len(order) == 0:
        print("Your cart is empty. Please add items to your cart before checking out.")
        return

    # Calculate the grand total
    grand_total = sum(item['total_price'] for item in order)

    # Calculate the discount and total after discount
    discount, total_after_discount = calculate_discount(grand_total)

    # Print the receipt
    print("\nCheckout")
    print("======================================")
    print("Customer Name:", customer_name)
    print("Customer ID:", customer_id)
    print("Order Date:", order_date)
    print("Order Type:", order_type)
    print("Phone Number:", phone_number)
    print("Payment Method:", payment_method)
    print("======================================")

    item_table = PrettyTable(['Item Name', 'Quantity', 'Price per Item', 'Total Price'])
    for item in order:
        item_table.add_row([item['item_name'], item['item_qty'], item['item_price'], item['total_price']])
    print(item_table)

    print("======================================")
    print("Grand Total:", grand_total)
    print("Discount:", discount)
    print("Total after Discount:", total_after_discount)

    # Confirm the order
    while True:
        confirm = input("Confirm the order? (yes/no): ").lower()
        if confirm in ["yes", "no"]:
            break
        else:
            print("Invalid input. Please type 'yes' or 'no'.")

    if confirm == "yes":
        # If confirmed, save the transaction details to the database
        # Here, we'll just print a message
        print("Your order has been placed successfully!")
        print("Thank you for shopping with us.")
        # Empty the cart
        order = []
    else:
        print("Your order has not been placed. You can continue shopping or modify your cart.")

# Main function
def main():
    global customer_name, customer_id, order_type, order_date, phone_number

    # Display a welcome message
    print('Welcome to Andimart Kebayoran!')

    # Get initial customer details
    update_customer_details()

    while True:
        # Print the current customer details and order status
        print_order()

        # Prompt for next action
        print("\nSelect an option:")
        print("1. Add item")
        print("2. Update item name")
        print("3. Update item quantity")
        print("4. Update item price")
        print("5. Delete item from order")
        print("6. Reset order")
        print("7. Update customer details")
        print("8. Check order details")
        print("9. Checkout")
        print("0. Quit")

        try:
            option = int(input('\nYour option: '))
        except ValueError:
            print("Invalid input. Please enter a number.")
            continue

        if option == 1:
            add_item()
        elif option == 2:
            update_item_name()
        elif option == 3:
            update_item_qty()
        elif option == 4:
            update_item_price()
        elif option == 5:
            delete_item()
        elif option == 6:
            reset_transaction()
        elif option == 7:
            update_customer_details()
        elif option == 8:
            check_order_details()
        elif option == 9:
            checkout()
        elif option == 0:
            print('Thank you for visiting Andi Supermart Kebayoran!')
            break
        else:
            print('Invalid option. Please choose a valid number.')

    # Close DB connection
    conn.close()

if __name__ == "__main__":
    main()
